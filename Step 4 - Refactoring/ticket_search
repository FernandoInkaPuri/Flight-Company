#!/usr/bin/env ruby
require 'date'
require 'test/unit'
require 'test/unit/assertions'
require 'test/unit/ui/console/testrunner'
require 'test/unit/ui/testrunnermediator'
require 'test/unit/ui/testrunnerutilities'
require 'pry'
require 'open3'
require 'net/http'
require 'json'

class Terminal
  def self.menu
    puts "Bem Vindo à Hawks Linhas Aéreas!"
    puts "Por favor digite seu nome: "

    @user_name = gets.chomp

    puts "Olá #{@user_name}, estamos felizes em ver seu interesse em viajar conosco!"

    puts "Selecione uma opção do menu abaixo: "
    puts "1 - Buscar passagens \n2 - Sair"
    choice = gets.chomp
    options = { search: '1', exit: '2' }
    options.each { |key, value| choice.define_singleton_method("#{key}?") { choice == value ? true : false } }

    if choice.search?
      TicketSearch.render_search
    elsif choice.exit?
      puts 'A Hawks linhas aéreas agradece sua presença! Até outros vôos!'
      exit
    else
      puts 'Por favor selecione uma opção válida no menu!'
    end
  end
end

class TicketSearch
  def self.date_valid?(date)
    begin
      Date.parse(date)
      true
    rescue
      false
    end
  end

  def self.render_search
    puts "Para realizar a busca das passagens aéres, por favor preencha as informações abaixo: "

    puts "Qual é o aeroporto de origem? "
    @route_origin = gets.chomp

    puts "Qual é o aeroporto de destino? "
    @route_destiny = gets.chomp

    puts "Digite a data que deseja viajar (exemplo: 25/01/2025):"

    @departure_date = gets.chomp.gsub(' ','')

    unless TicketSearch.date_valid?(@departure_date)
      puts "Informação inválida. Por favor digite uma data!"
      render_search
    end

    puts "Digite a data de retorno (exemplo: 10/03/2025). Caso não queira pesquisar passagens "\
    "para a volta, apenas digite enter:"

    @return_date = gets.chomp.gsub(' ','')
    return_date_valid = TicketSearch.date_valid?(@return_date)

    if !return_date_valid && !@return_date.empty?
      puts "Informação inválida. Por favor digite uma data!"
      render_search
    end

    puts "Os dados para busca da passagem são:
      Aeroporto de origem: #{@route_origin}
      Aeroporto de destino: #{@route_destiny}
      Data de Partida: #{@departure_date}
      Data de Retorno: #{@return_date.empty? ? "Não informado": @return_date}
    "
    if @return_date.empty?
      one_way_search_travel
    else
      roundtrip_search_travel
    end
  end

  def self.one_way_search_travel
    departure_date = Date.parse(@departure_date).strftime('%Y-%m-%d')

    uri = URI("https://sky-scanner3.p.rapidapi.com/flights/search-one-way?fromEntityId=#{@route_origin}&toEntityId=#{@route_destiny}&departDate=#{departure_date}")
    header = {'x-rapidapi-key': ENV['RAPID_APIKEY']}

    response = Net::HTTP.get(uri, headers = header)
    show_flights(response)
  end

  def self.roundtrip_search_travel
    departure_date = Date.parse(@departure_date).strftime('%Y-%m-%d')
    return_date = Date.parse(@return_date).strftime('%Y-%m-%d')

    uri = URI("https://sky-scanner3.p.rapidapi.com/flights/search-roundtrip?fromEntityId=#{@route_origin}&toEntityId=#{@route_destiny}&departDate=#{departure_date}&returnDate=#{return_date}")
    header = {'x-rapidapi-key': ENV['RAPID_APIKEY']}

    response = Net::HTTP.get(uri, headers = header)

    show_flights(response)
  end

  def self.show_flights(response)
    flights = format_travel_response(response)
    puts "Voos de #{@route_origin} para #{@route_destiny} disponíveis:"

    if @return_date.empty?
      puts flights[:one_way]
    else
      puts flights[:roundtrip][:departure]
      .zip(flights[:roundtrip][:return])
    end
  end

  def self.format_travel_response(response)
    json = JSON.parse(response)

    flights = { one_way: [], roundtrip: { departure: [], return: [] } }

    json['data']['itineraries'].each do |itinerary|
      price = itinerary['price']['formatted']

      itinerary['legs'].each_with_index do |leg, index|
        company_name = leg['carriers']['marketing'].first['name']
        departure_time = Time.new(leg['departure']).strftime('%H:%M')
        arrival_time = Time.new(leg['arrival']).strftime('%H:%M')

        if itinerary['legs'].size == 1
          flights[:one_way] << "Empresa #{company_name}, horário de partida: #{departure_time}, previsão de chegada: #{arrival_time}, preço: #{price}"
        elsif index == 0
          flights[:roundtrip][:departure] << "Empresa #{company_name}, horário de partida: #{departure_time}, previsão de chegada: #{arrival_time}"
        elsif index == 1
          flights[:roundtrip][:return] << "Retorno: Empresa #{company_name}, horário de partida: #{departure_time}, previsão de chegada: #{arrival_time}, preço total da viagem: #{price}"
        end
      end
    end
    flights
  end
end

include Test::Unit::Assertions
class Tests
  class << self
    def test_valid_date
      date = TicketSearch.date_valid?('09/02/1998')

      assert_equal(true, date, 'teste bem sucedido')
    end

    def test_invalid_date
      nonexistent_date = TicketSearch.date_valid?('70/30/2024')
      typed_text = TicketSearch.date_valid?('Osasco')
      typed_number = TicketSearch.date_valid?('1234567')

      assert_equal(false, nonexistent_date)
      assert_equal(false, typed_text)
      assert_equal(false, typed_number)
    end

    def test_input_values
      name = 'Fernando'
      option = '1'
      route_origin = 'GRU'
      route_destiny = 'LIS'
      departure_date = Date.today.next_month.strftime('%d/%m/%Y')
      return_date = Date.today.next_month(2).strftime('%d/%m/%Y')

      typed_inputs = StringIO.new("#{name}\n#{option}\n#{route_origin}\n#{route_destiny}\n#{departure_date}\n#{return_date}")
      resultado, status = Open3.capture2("./ticket_search", :stdin_data=> typed_inputs)

      assert_equal(true, resultado.include?("Empresa"))
      assert_equal(true, resultado.include?("horário de partida:"))
      assert_equal(true, resultado.include?("previsão de chegada:"))
    end

    def run_tests
      suite = Test::Unit::TestSuite.new
      test_names = ['test_valid_date', 'test_invalid_date', 'test_input_values']
      # binding.pry
      test_names.each { |name| suite << Test::Unit::TestCase.new("#{name}") }

      runner = Test::Unit::UI::Console::TestRunner.new(suite)
      runner.start
    end
  end
end

if ARGV.include?('--tests')
  ARGV.delete('--tests')
  binding.pry
  Tests.run_tests
else
  Terminal.menu
end
